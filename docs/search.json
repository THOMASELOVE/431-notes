[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes for 431",
    "section": "",
    "text": "This document is broken down into multiple chapters. Use the table of contents on the left side of the screen to navigate between chapters, or use the right side to navigate within the current chapter.\nYou can also search the document, using an automated index.\nAny of the code provided in the document can be copied to the clipboard using the Copy icon at the top right of the code block.\nThe document will be updated (unpredictably) throughout the semester.\n\n\n\nThese Notes provide a series of examples using R to work through issues that are likely to come up in PQHS/CRSP/MPHP 431. What you will mostly find are brief explanations of a key idea or summary, accompanied (most of the time) by R code and a demonstration of the results of applying that code.\nWhile these Notes share some of the features of a textbook, they are neither comprehensive nor completely original. The main purpose is to give 431 students a set of common materials on which to draw during the course. In class, we will sometimes:\n\nreiterate points made in this document,\namplify what is here,\nsimplify the presentation of things done here,\nuse new examples to show some of the same techniques,\nrefer to issues not mentioned in this document,\n\nbut what we don’t do is follow these notes very precisely. We assume instead that you will read the materials and try to learn from them, just as you will attend classes and try to learn from them. We welcome feedback of all kinds on this document or anything else.\n\n\n\nThe online home for Dr. Love’s 431 course in Fall 2022 is\nhttps://thomaselove.github.io/431-2022/.\nGo there for all information related to the course.\nAll of the code and text in these Notes is posted online as HTML, and it is also possible to download PDF and ePub versions of the document from the down arrow next to the title (Notes for 431) at the top left of this screen. All data and R code related to these notes are also available to you through our course web site.\nBy the end of the semester, you will also have access to the Quarto files which generate everything in the document, including all of the R results. Quarto is a souped-up version of R Markdown, which you will use during the semester to complete your assignments, and which I used to develop previous versions of these notes. We will demonstrate the use of R Markdown and RStudio (the “program” we use to interface with the R language) in class."
  },
  {
    "objectID": "int_r_setup.html",
    "href": "int_r_setup.html",
    "title": "Setting Up R",
    "section": "",
    "text": "These Notes make extensive use of\nboth of which are free, and you’ll need to install them on your machine. Instructions for doing so will be found on the course website.\nIf you need a gentle introduction, or if you’re just new to R and RStudio and need to learn about them, we encourage you to take a look at https://moderndive.com/, which provides an introduction to statistical and data sciences via R at Ismay and Kim (2022)."
  },
  {
    "objectID": "int_r_setup.html#r-markdown",
    "href": "int_r_setup.html#r-markdown",
    "title": "Setting Up R",
    "section": "R Markdown",
    "text": "R Markdown\nThese notes were written using Quarto, which is an amplification of R Markdown (which we’ll learn in 431.) R Markdown, like R and RStudio and Quarto, is free and open source.\nR Markdown is described as an authoring framework for data science, which lets you\n\nsave and execute R code\ngenerate high-quality reports that can be shared with an audience\n\nThis description comes from RStudio’s introduction to R Markdown which provides an overview and quick tour of what’s possible with R Markdown.\nAnother excellent resource to learn more about R Markdown tools is the Communicate section (especially the R Markdown chapter) of Wickham and Grolemund (2022)."
  },
  {
    "objectID": "int_r_setup.html#r-packages",
    "href": "int_r_setup.html#r-packages",
    "title": "Setting Up R",
    "section": "R Packages",
    "text": "R Packages\nAt the start of each chapter that involves R code, I’ll present a series of commands I run to set up R to use several packages (libraries) of functions that expand its capabilities, make a specific change to how I want R output to be displayed (that’s the comment = NA piece) and sets the theme for most graphs to theme_bw(). A chunk of code like this will occur near the top of any R Markdown work.\nFor example, this is the setup for one of our early chapters that loads four packages.\n\nknitr::opts_chunk$set(comment = NA)\n\nlibrary(palmerpenguins)\nlibrary(janitor)\nlibrary(knitr)\nlibrary(tidyverse)\n\ntheme_set(theme_bw())\n\nYou only need to install a package once, but you need to reload it (using the library() function) every time you start a new session. I always load the package called tidyverse last, since doing so avoids some annoying problems."
  },
  {
    "objectID": "int_r_setup.html#the-love-boost.r-script",
    "href": "int_r_setup.html#the-love-boost.r-script",
    "title": "Setting Up R",
    "section": "The Love-boost.R script",
    "text": "The Love-boost.R script\nIn October, when we start Part B of the course, we’ll use some special R functions I’ve gathered for you in a script called Love-boost. I’ll tell R about that code using the following command…\n\nsource(\"data/Love-boost.R\")\n\nThe Love-boost.R script includes four functions:\n\nbootdif\nsaifs.ci\ntwobytwo\nretrodesign"
  },
  {
    "objectID": "int_r_setup.html#packages-used-in-these-notes",
    "href": "int_r_setup.html#packages-used-in-these-notes",
    "title": "Setting Up R",
    "section": "Packages Used in these Notes",
    "text": "Packages Used in these Notes\nA complete list of all R packages we want you to install this semester (which includes some packages not included in these Notes) is maintained at our course web site.\n\n\n\nPackage\nParts\nKey functions in the Package\n\n\n\n\narm\nC\n–\n\n\nboot\nB\n–\n\n\nbroom\nA, B, C\ntidy, augment, glance\n\n\ncar\nA, C\nboxCox, powerTransform, testTransform\n\n\nEpi\nB\ntwoby2\n\n\nfivethirtyeight\nAppendix\nsource of data\n\n\nGGally\nA, C\nggpairs\n\n\nggrepel\nC\n–\n\n\nggridges\nA, B\n–\n\n\ngt\nA\nfor presenting tables\n\n\nHmisc\nA, B, C\ndescribe and others\n\n\njanitor\nA, B, C\ntabyl and others\n\n\nknitr\nA, B, C\nkable\n\n\nmice\nC\n–\n\n\nmosaic\nA, B, C\nfavstats\n\n\nnaniar\nA\nn_miss, miss_case_table, gg_miss_var\n\n\nNHANES\nA\nsource of data\n\n\npalmerpenguins\nA\nsource of data\n\n\npatchwork\nA, B, C\nfor combining/annotating plots\n\n\npsych\nA, B\ndescribe\n\n\npwr\nB\n–\n\n\nrms\nC\n–\n\n\nsimputation\nA\nvarious impuation functions\n\n\ntidyverse\nA, B, C, Appendix\ndozens of functions\n\n\nvcd\nB\n–\n\n\n\n\nThe tidyverse\nThe tidyverse package is actually a meta-package which includes the following core packages:\n\nggplot2 for creating graphics\ndplyr for data manipulation\ntidyr for creating tidy data\nreadr for reading in rectangular data\npurrr for working with functions and vectors\ntibble for creating tibbles - lazy, surly data frames\nstringr for working with data strings\nforcats for solving problems with factors\n\nLoading the tidyverse with library(tidyverse) loads those eight packages.\nInstalling the tidyverse also installs several other useful packages on your machine. Read more about the tidyverse at https://www.tidyverse.org/\n\n\nPackages Not Included in the Notes at Present\n\ndevtools\nequatiomatic\ngapminder\nhere\nkableExtra\nmagrittr\nmarkdown\nmodelsummary\nnhanesA\nrmarkdown\nrmdformats\nrstanarm\nsessioninfo\ntableone\ntidymodels\nvisdat\n\n\n\n\n\nIsmay, Chester, and Albert Y. Kim. 2022. ModernDive: Statistical Inference via Data Science. http://moderndive.com/.\n\n\nWickham, Hadley, and Garrett Grolemund. 2022. R for Data Science. Second. O’Reilly. https://r4ds.hadley.nz/."
  },
  {
    "objectID": "01-datascience.html",
    "href": "01-datascience.html",
    "title": "1  Data Science and 431",
    "section": "",
    "text": "The definition of data science can be a little slippery. One current view of data science, is exemplified by Steven Geringer’s 2014 Venn diagram.\nData Science is a team activity. Everyone working in data science brings some part of the necessary skill set, but no one person can cover all three areas alone for excellent projects."
  },
  {
    "objectID": "01-datascience.html#data-science-project-cycle",
    "href": "01-datascience.html#data-science-project-cycle",
    "title": "1  Data Science and 431",
    "section": "1.1 Data Science Project Cycle",
    "text": "1.1 Data Science Project Cycle\nA typical data science project can be modeled as follows, which comes from the introduction to the amazing book R for Data Science, by Garrett Grolemund and Hadley Wickham, which is a key text for this course (Wickham and Grolemund 2022).\n\n\n\n\n\nSource: R for Data Science: Introduction\n\n\n\n\nThis diagram is sometimes referred to as the Krebs Cycle of Data Science. For more on the steps of a data science project, we encourage you to read the Introduction of Wickham and Grolemund (2022)."
  },
  {
    "objectID": "01-datascience.html#data-science-and-the-431-course",
    "href": "01-datascience.html#data-science-and-the-431-course",
    "title": "1  Data Science and 431",
    "section": "1.2 Data Science and the 431 Course",
    "text": "1.2 Data Science and the 431 Course\nWe’ll discuss each of these elements in the 431 course, focusing at the start on understanding our data through transformation, modeling and (especially in the early stages) visualization. In 431, we learn how to get things done.\n\nWe get people working with R and R Studio and R Markdown, even if they are completely new to coding. A gentle introduction is provided at Ismay and Kim (2022)\nWe learn how to use the tidyverse (http://www.tidyverse.org/), an array of tools in R (mostly developed by Hadley Wickham and his colleagues at R Studio) which share an underlying philosophy to make data science faster, easier, more reproducible and more fun. A critical text for understanding the tidyverse is Wickham and Grolemund (2022). Tidyverse tools facilitate:\n\nimporting data into R, which can be the source of intense pain for some things, but is really quite easy 95% of the time with the right tool.\ntidying data, that is, storing it in a format that includes one row per observation and one column per variable. This is harder, and more important, than you might think.\ntransforming data, perhaps by identifying specific subgroups of interest, creating new variables based on existing ones, or calculating summaries.\nvisualizing data to generate actual knowledge and identify questions about the data - this is an area where R really shines, and we’ll start with it in class.\nmodeling data, taking the approach that modeling is complementary to visualization, and allows us to answer questions that visualization helps us identify.\nand last, but definitely not least, communicating results, models and visualizations to others, in a way that is reproducible and effective.\n\nSome programming/coding is an inevitable requirement to accomplish all of these aims. If you are leery of coding, you’ll need to get past that, with the help of this course and our stellar teaching assistants. Getting started is always the most challenging part, but our experience is that most of the pain of developing these new skills evaporates by early October."
  },
  {
    "objectID": "01-datascience.html#what-the-course-is-and-isnt",
    "href": "01-datascience.html#what-the-course-is-and-isnt",
    "title": "1  Data Science and 431",
    "section": "1.3 What The Course Is and Isn’t",
    "text": "1.3 What The Course Is and Isn’t\nThe 431 course is about getting things done. In developing this course, we adopt a modern approach that places data at the center of our work. Our goal is to teach you how to do truly reproducible research with modern tools. We want you to be able to collect and use data effectively to address questions of interest.\nThe curriculum includes more on several topics than you might expect from a standard graduate introduction to biostatistics.\n\ndata gathering\ndata wrangling\nexploratory data analysis and visualization\nmultivariate modeling\ncommunication\n\nIt also nearly completely avoids formalism and is extremely applied - this is absolutely not a course in theoretical or mathematical statistics, and these Notes reflect that approach.\nThere’s very little of the mathematical underpinnings here:\n\\[\nf(x) = \\frac{e^{-(x - \\mu)^{2}/(2\\sigma^{2})}}{\\sigma{\\sqrt{2 \\pi }}}\n\\]\nInstead, these notes (and the course) focus on how we get R to do the things we want to do, and how we interpret the results of our work. Our next Chapter provides a first example.\n\n\n\n\nGelman, Andrew, and Deborah Nolan. 2017. Teaching Statistics: A Bag of Tricks. Second Edition. Oxford, UK: Oxford University Press.\n\n\nIsmay, Chester, and Albert Y. Kim. 2022. ModernDive: Statistical Inference via Data Science. http://moderndive.com/.\n\n\nWickham, Hadley, and Garrett Grolemund. 2022. R for Data Science. Second. O’Reilly. https://r4ds.hadley.nz/."
  },
  {
    "objectID": "02-penguins.html",
    "href": "02-penguins.html",
    "title": "2  The Palmer Penguins",
    "section": "",
    "text": "The data in the palmerpenguins package in R includes information on several measurements of interest for adult foraging penguins observed on islands in the Palmer Archipelago near Palmer Station, Antarctica. Dr. Kristen Gorman and the Palmer Station Long Term Ecological Research (LTER) Program collected the data and made it available1. The data describe three species of penguins, called Adelie, Chinstrap and Gentoo.\nFor more on the palmerpenguins package, visit https://allisonhorst.github.io/palmerpenguins/."
  },
  {
    "objectID": "02-penguins.html#setup-packages-used-here",
    "href": "02-penguins.html#setup-packages-used-here",
    "title": "2  The Palmer Penguins",
    "section": "2.1 Setup: Packages Used Here",
    "text": "2.1 Setup: Packages Used Here\nWe will use the palmerpenguins package to supply us with data for this chapter. The janitor packages includes several useful functions, including tabyl. The knitr package includes the kable() function we’ll use. Finally, the tidyverse package will provide the bulk of the functions we’ll use in our work throughout the semester.\nI always load the tidyverse last, because it solves some problems to do so.\n\nknitr::opts_chunk$set(comment = NA)\n\nlibrary(palmerpenguins) \nlibrary(janitor) \nlibrary(knitr) \nlibrary(gt)\nlibrary(tidyverse) \n\ntheme_set(theme_bw())"
  },
  {
    "objectID": "02-penguins.html#viewing-a-data-set",
    "href": "02-penguins.html#viewing-a-data-set",
    "title": "2  The Palmer Penguins",
    "section": "2.2 Viewing a Data Set",
    "text": "2.2 Viewing a Data Set\nThe penguins data from the palmerpenguins package contains 344 rows and 8 columns. Each row contains data for a different penguin, and each column describes a variable contained in the data set.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows\n\n\nFor instance, the first penguin in the data is of the species Adelie (the three species included in the data are Adelie, Chinstrap and Gentoo), and was observed on the island called Torgeson. The remaining data for that penguin include measures of its bill length and depth, its flipper length and body mass, its sex and the year in which it was observed.\nNote that though there are 344 rows in the tibble of data called penguins, only the first ten rows (penguins) are shown in the table above. Note also that the symbol <NA> is used to indicate a missing (not available) value."
  },
  {
    "objectID": "02-penguins.html#create-newpenguins-eliminating-missing-data",
    "href": "02-penguins.html#create-newpenguins-eliminating-missing-data",
    "title": "2  The Palmer Penguins",
    "section": "2.3 Create newpenguins: Eliminating Missing Data",
    "text": "2.3 Create newpenguins: Eliminating Missing Data\nNext, let’s take the penguins data from the palmerpenguins package, and identify those observations which have complete data (so, no missing values) in four variables of interest. We’ll store that result in a new tibble (data set) called new_penguins and then take a look at that result using the following code.\nNote that the code below:\n\nuses the “pipe” |> to send the penguins tibble to the filter() function\nuses <- to assign the result of our work to the new_penguins tibble\nuses the complete.cases() function to remove cases within penguins that have missing data on any of the four variables (flipper_length_mm, body_mass_g, species or sex) that we identify\n\n\nnew_penguins <- penguins |>\n    filter(complete.cases(flipper_length_mm, body_mass_g, species, sex))\n\nnew_penguins\n\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 5 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 6 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 7 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 8 Adelie  Torgersen           41.1          17.6        182    3200 fema…  2007\n 9 Adelie  Torgersen           38.6          21.2        191    3800 male   2007\n10 Adelie  Torgersen           34.6          21.1        198    4400 male   2007\n# … with 323 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n# ℹ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "02-penguins.html#counting-things-and-making-tables",
    "href": "02-penguins.html#counting-things-and-making-tables",
    "title": "2  The Palmer Penguins",
    "section": "2.4 Counting Things and Making Tables",
    "text": "2.4 Counting Things and Making Tables\nSo, how many penguins are in our new_penguins data? When we printed out the result, we got an answer, but (as with many things in R) there are many ways to get the same result.\n\nnrow(new_penguins)\n\n[1] 333\n\n\nHow do our new_penguins data break down by sex and species? We’ll use the tabyl() function from the janitor package to look at this.\n\nnew_penguins |> \n    tabyl(sex, species) \n\n    sex Adelie Chinstrap Gentoo\n female     73        34     58\n   male     73        34     61\n\n\nThe output is reasonably clear (there are 73 female and 73 male Adelie penguins in the newpenguins tibble, for example) but could we make that table a little prettier, and while we’re at it, can we add the row and column totals?\n\nnew_penguins |> \n    tabyl(sex, species) |>\n    adorn_totals(where = c(\"row\", \"col\")) |> # add row, column totals\n    kable()  # one convenient way to make the table prettier\n\n\n\n\nsex\nAdelie\nChinstrap\nGentoo\nTotal\n\n\n\n\nfemale\n73\n34\n58\n165\n\n\nmale\n73\n34\n61\n168\n\n\nTotal\n146\n68\n119\n333\n\n\n\n\n\nThe kable() function comes from the knitr package we loaded earlier. Notice that we added some comments to the code here with the prefix #. These comments are ignored by R in processing the data.\nWe can switch the rows and columns, and add some additional features, using the code below, which makes use of the gt() and tab_header() functions from the gt package, which is designed to help build complex tables. More on the incredibly versatile gt() package is available at https://gt.rstudio.com/.\n\nnew_penguins |> \n    tabyl(species, sex) |>\n    adorn_totals(where = c(\"row\", \"col\")) |> \n    gt() |>\n    tab_header(\n      title = md(\"Palmer Penguins in **newpenguins**\"),\n      subtitle = \"Comparing sexes by species\"\n    )\n\n\n\n\n\n  \n    \n      Palmer Penguins in newpenguins\n    \n    \n      Comparing sexes by species\n    \n  \n  \n    \n      species\n      female\n      male\n      Total\n    \n  \n  \n    Adelie\n73\n73\n146\n    Chinstrap\n34\n34\n68\n    Gentoo\n58\n61\n119\n    Total\n165\n168\n333"
  },
  {
    "objectID": "02-penguins.html#creating-a-scatterplot",
    "href": "02-penguins.html#creating-a-scatterplot",
    "title": "2  The Palmer Penguins",
    "section": "2.5 Creating a Scatterplot",
    "text": "2.5 Creating a Scatterplot\nNow, let’s look at the other two variables of interest. Let’s create a graph showing the association of body mass with flipper length across the complete set of 333 penguins.\n\nggplot(new_penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point() \n\n\n\n\nSome of you may want to include a straight-line model (fit by a classical linear regression) to this plot. One way to do that in R involves the addition of a single line of code, like this:\n\nggplot(new_penguins, aes(x = body_mass_g, y = flipper_length_mm)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", formula = y ~ x,\n                col = \"red\", se = FALSE)\n\n\n\n\nWhenever we build a graph for ourselves, these default choices may be sufficient. But I’d like to see a prettier version if I was going to show it to someone else. So, I might use a different color for each species, and I might add a title, like this.\n\nggplot(new_penguins, aes(x = body_mass_g, y = flipper_length_mm, col = species)) +\n    geom_point() + \n    labs(title = \"Flipper Length and Body Mass for 333 of the Palmer Penguins\")"
  },
  {
    "objectID": "02-penguins.html#six-ways-to-improve-this-graph",
    "href": "02-penguins.html#six-ways-to-improve-this-graph",
    "title": "2  The Palmer Penguins",
    "section": "2.6 Six Ways To “Improve” This Graph",
    "text": "2.6 Six Ways To “Improve” This Graph\nNow, let’s build a new graph to incorporate some additional information and improve the appearance. Here, I want to:\n\nplot the relationship between body mass and flipper length in light of both Sex and Species\nincrease the size of the points and add a little transparency so we can see if points overlap,\nadd some smooth curves to summarize the relationships between the two quantities (body mass and flipper length) within each combination of species and sex,\nsplit the graph into two “facets” (one for each sex),\nimprove the axis labels,\nimprove the titles by adding a subtitle, and also adding in some code to count the penguins (rather than hard-coding in the total number.)\n\n\nggplot(new_penguins, aes(x = body_mass_g, y = flipper_length_mm, \n                         col = species)) +\n    geom_point(size = 2, alpha = 0.5) + \n    geom_smooth(method = \"loess\", formula = y ~ x, \n                se = FALSE, size = 1.5) +\n    facet_grid(~ sex) +\n    labs(title = \"Flipper Length and Body Mass, by Sex & Species\",\n         subtitle = str_glue(nrow(new_penguins), \" of the Palmer Penguins\"),\n         x = \"Body Mass (g)\", \n         y = \"Flipper Length (mm)\")"
  },
  {
    "objectID": "02-penguins.html#a-little-reflection",
    "href": "02-penguins.html#a-little-reflection",
    "title": "2  The Palmer Penguins",
    "section": "2.7 A Little Reflection",
    "text": "2.7 A Little Reflection\nWhat can we learn from these plots and their construction? In particular,\n\nWhat do these plots suggest about the center of the distribution of each quantity (body mass and flipper length) overall, and within each combination of Sex and Species?\nWhat does the final plot suggest about the spread of the distribution of each of those quantities in each combination of Sex and Species?\nWhat do the plots suggest about the association of body mass and flipper length across the complete set of penguins?\nHow does the shape and nature of this body mass - flipper length relationship change based on Sex and Species?\nDo you think it would be helpful to plot a straight-line relationship (rather than a smooth curve) within each combination of Sex and Species in the final plot? Why or why not? (Also, what would we have to do to the code to accomplish this?)\nHow was the R code for the plot revised to accomplish each of the six “wants” specified above?"
  },
  {
    "objectID": "98_gettingdataintoR.html",
    "href": "98_gettingdataintoR.html",
    "title": "Appendix A — Getting Data Into R",
    "section": "",
    "text": "To use data from an R package, for instance, the bechdel data from the fivethirtyeight package, you can simply load the relevant package with library and then the data frame will be available\n\nlibrary(fivethirtyeight)\nlibrary(tidyverse)\n\nbechdel\n\n# A tibble: 1,794 × 15\n    year imdb    title test  clean…¹ binary budget domgr…² intgr…³ code  budge…⁴\n   <int> <chr>   <chr> <chr> <ord>   <chr>   <int>   <dbl>   <dbl> <chr>   <int>\n 1  2013 tt1711… 21 &… nota… notalk  FAIL   1.3 e7  2.57e7  4.22e7 2013…  1.3 e7\n 2  2012 tt1343… Dred… ok-d… ok      PASS   4.5 e7  1.34e7  4.09e7 2012…  4.57e7\n 3  2013 tt2024… 12 Y… nota… notalk  FAIL   2   e7  5.31e7  1.59e8 2013…  2   e7\n 4  2013 tt1272… 2 Gu… nota… notalk  FAIL   6.1 e7  7.56e7  1.32e8 2013…  6.1 e7\n 5  2013 tt0453… 42    men   men     FAIL   4   e7  9.50e7  9.50e7 2013…  4   e7\n 6  2013 tt1335… 47 R… men   men     FAIL   2.25e8  3.84e7  1.46e8 2013…  2.25e8\n 7  2013 tt1606… A Go… nota… notalk  FAIL   9.2 e7  6.73e7  3.04e8 2013…  9.2 e7\n 8  2013 tt2194… Abou… ok-d… ok      PASS   1.2 e7  1.53e7  8.73e7 2013…  1.2 e7\n 9  2013 tt1814… Admi… ok    ok      PASS   1.3 e7  1.80e7  1.80e7 2013…  1.3 e7\n10  2013 tt1815… Afte… nota… notalk  FAIL   1.3 e8  6.05e7  2.44e8 2013…  1.3 e8\n# … with 1,784 more rows, 4 more variables: domgross_2013 <dbl>,\n#   intgross_2013 <dbl>, period_code <int>, decade_code <int>, and abbreviated\n#   variable names ¹​clean_test, ²​domgross, ³​intgross, ⁴​budget_2013\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  },
  {
    "objectID": "98_gettingdataintoR.html#using-read_rds-to-read-in-an-r-data-set",
    "href": "98_gettingdataintoR.html#using-read_rds-to-read-in-an-r-data-set",
    "title": "Appendix A — Getting Data Into R",
    "section": "Using read_rds to read in an R data set",
    "text": "Using read_rds to read in an R data set\nWe have provided the nnyfs.Rds data file on the course data page.\nSuppose you have downloaded this data file into a directory on your computer called data which is a sub-directory of the directory where you plan to do your work, perhaps called 431-nnyfs.\nOpen RStudio and create a new project into the 431-nnyfs directory on your computer. You should see a data subdirectory in the Files window in RStudio after the project is created.\nNow, read in the nnyfs.Rds file to a new tibble in R called nnyfs_new with the following command:\n\nnnyfs_new <- read_rds(\"data/nnyfs.Rds\")\n\nHere are the results…\n\nnnyfs_new\n\n# A tibble: 1,518 × 45\n    SEQN sex    age_ch…¹ race_…² educ_…³ langu…⁴ sampl…⁵ incom…⁶ age_a…⁷ educ_…⁸\n   <dbl> <fct>     <dbl> <fct>     <dbl> <fct>     <dbl>   <dbl>   <dbl> <fct>  \n 1 71917 Female       15 3_Blac…       9 English  28299.    0.21      46 2_9-11…\n 2 71918 Female        8 3_Blac…       2 English  15127.    5         46 3_High…\n 3 71919 Female       14 2_Whit…       8 English  29977.    5         42 5_Coll…\n 4 71920 Female       15 2_Whit…       8 English  80652.    0.87      53 3_High…\n 5 71921 Male          3 2_Whit…      NA English  55592.    4.34      31 3_High…\n 6 71922 Male         12 1_Hisp…       6 English  27365.    5         42 4_Some…\n 7 71923 Male         12 2_Whit…       5 English  86673.    5         39 2_9-11…\n 8 71924 Female        8 4_Othe…       2 English  39549.    2.74      31 3_High…\n 9 71925 Male          7 1_Hisp…       0 English  42333.    0.46      45 2_9-11…\n10 71926 Male          8 3_Blac…       2 English  15307.    1.57      56 3_High…\n# … with 1,508 more rows, 35 more variables: respondent <fct>, salt_used <fct>,\n#   energy <dbl>, protein <dbl>, sugar <dbl>, fat <dbl>, diet_yesterday <fct>,\n#   water <dbl>, plank_time <dbl>, height <dbl>, weight <dbl>, bmi <dbl>,\n#   bmi_cat <fct>, arm_length <dbl>, waist <dbl>, arm_circ <dbl>,\n#   calf_circ <dbl>, calf_skinfold <dbl>, triceps_skinfold <dbl>,\n#   subscapular_skinfold <dbl>, active_days <dbl>, tv_hours <dbl>,\n#   computer_hours <dbl>, physical_last_week <fct>, enjoy_recess <fct>, …\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  },
  {
    "objectID": "98_gettingdataintoR.html#using-read_csv-to-read-in-a-comma-separated-version-of-a-data-file",
    "href": "98_gettingdataintoR.html#using-read_csv-to-read-in-a-comma-separated-version-of-a-data-file",
    "title": "Appendix A — Getting Data Into R",
    "section": "Using read_csv to read in a comma-separated version of a data file",
    "text": "Using read_csv to read in a comma-separated version of a data file\nWe have provided the nnyfs.csv data file on the course data page.\nSuppose you have downloaded this data file into a directory on your computer called data which is a sub-directory of the directory where you plan to do your work, perhaps called 431-nnyfs.\nOpen RStudio and create a new project into the 431-nnyfs directory on your computer. You should see a data subdirectory in the Files window in RStudio after the project is created.\nNow, read in the nnyfs.csv file to a new tibble in R called nnyfs_new2 with the following command:\n\nnnyfs_new2 <- read_csv(\"data/nnyfs.csv\")\n\nRows: 1518 Columns: 45\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (18): sex, race_eth, language, educ_adult, respondent, salt_used, diet_y...\ndbl (27): SEQN, age_child, educ_child, sampling_wt, income_pov, age_adult, e...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnnyfs_new2\n\n# A tibble: 1,518 × 45\n    SEQN sex    age_ch…¹ race_…² educ_…³ langu…⁴ sampl…⁵ incom…⁶ age_a…⁷ educ_…⁸\n   <dbl> <chr>     <dbl> <chr>     <dbl> <chr>     <dbl>   <dbl>   <dbl> <chr>  \n 1 71917 Female       15 3_Blac…       9 English  28299.    0.21      46 2_9-11…\n 2 71918 Female        8 3_Blac…       2 English  15127.    5         46 3_High…\n 3 71919 Female       14 2_Whit…       8 English  29977.    5         42 5_Coll…\n 4 71920 Female       15 2_Whit…       8 English  80652.    0.87      53 3_High…\n 5 71921 Male          3 2_Whit…      NA English  55592.    4.34      31 3_High…\n 6 71922 Male         12 1_Hisp…       6 English  27365.    5         42 4_Some…\n 7 71923 Male         12 2_Whit…       5 English  86673.    5         39 2_9-11…\n 8 71924 Female        8 4_Othe…       2 English  39549.    2.74      31 3_High…\n 9 71925 Male          7 1_Hisp…       0 English  42333.    0.46      45 2_9-11…\n10 71926 Male          8 3_Blac…       2 English  15307.    1.57      56 3_High…\n# … with 1,508 more rows, 35 more variables: respondent <chr>, salt_used <chr>,\n#   energy <dbl>, protein <dbl>, sugar <dbl>, fat <dbl>, diet_yesterday <chr>,\n#   water <dbl>, plank_time <dbl>, height <dbl>, weight <dbl>, bmi <dbl>,\n#   bmi_cat <chr>, arm_length <dbl>, waist <dbl>, arm_circ <dbl>,\n#   calf_circ <dbl>, calf_skinfold <dbl>, triceps_skinfold <dbl>,\n#   subscapular_skinfold <dbl>, active_days <dbl>, tv_hours <dbl>,\n#   computer_hours <dbl>, physical_last_week <chr>, enjoy_recess <chr>, …\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\nIf you also want to convert the character variables to factors, as you will often want to do before analyzing the results, you should instead use:\n\nnnyfs_new3 <- read_csv(\"data/nnyfs.csv\") %>%\n    mutate(across(where(is.character), as_factor))\n\nRows: 1518 Columns: 45\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (18): sex, race_eth, language, educ_adult, respondent, salt_used, diet_y...\ndbl (27): SEQN, age_child, educ_child, sampling_wt, income_pov, age_adult, e...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnnyfs_new3\n\n# A tibble: 1,518 × 45\n    SEQN sex    age_ch…¹ race_…² educ_…³ langu…⁴ sampl…⁵ incom…⁶ age_a…⁷ educ_…⁸\n   <dbl> <fct>     <dbl> <fct>     <dbl> <fct>     <dbl>   <dbl>   <dbl> <fct>  \n 1 71917 Female       15 3_Blac…       9 English  28299.    0.21      46 2_9-11…\n 2 71918 Female        8 3_Blac…       2 English  15127.    5         46 3_High…\n 3 71919 Female       14 2_Whit…       8 English  29977.    5         42 5_Coll…\n 4 71920 Female       15 2_Whit…       8 English  80652.    0.87      53 3_High…\n 5 71921 Male          3 2_Whit…      NA English  55592.    4.34      31 3_High…\n 6 71922 Male         12 1_Hisp…       6 English  27365.    5         42 4_Some…\n 7 71923 Male         12 2_Whit…       5 English  86673.    5         39 2_9-11…\n 8 71924 Female        8 4_Othe…       2 English  39549.    2.74      31 3_High…\n 9 71925 Male          7 1_Hisp…       0 English  42333.    0.46      45 2_9-11…\n10 71926 Male          8 3_Blac…       2 English  15307.    1.57      56 3_High…\n# … with 1,508 more rows, 35 more variables: respondent <fct>, salt_used <fct>,\n#   energy <dbl>, protein <dbl>, sugar <dbl>, fat <dbl>, diet_yesterday <fct>,\n#   water <dbl>, plank_time <dbl>, height <dbl>, weight <dbl>, bmi <dbl>,\n#   bmi_cat <fct>, arm_length <dbl>, waist <dbl>, arm_circ <dbl>,\n#   calf_circ <dbl>, calf_skinfold <dbl>, triceps_skinfold <dbl>,\n#   subscapular_skinfold <dbl>, active_days <dbl>, tv_hours <dbl>,\n#   computer_hours <dbl>, physical_last_week <fct>, enjoy_recess <fct>, …\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\nNote that, for example, sex and race_eth are now listed as factor (fctr) variables. One place where this distinction between character and factor variables matters is when you summarize the data.\n\nsummary(nnyfs_new2$race_eth)\n\n   Length     Class      Mode \n     1518 character character \n\n\n\nsummary(nnyfs_new3$race_eth)\n\n  3_Black Non-Hispanic   2_White Non-Hispanic             1_Hispanic \n                   338                    610                    450 \n4_Other Race/Ethnicity \n                   120"
  },
  {
    "objectID": "98_gettingdataintoR.html#converting-character-variables-into-factors",
    "href": "98_gettingdataintoR.html#converting-character-variables-into-factors",
    "title": "Appendix A — Getting Data Into R",
    "section": "Converting Character Variables into Factors",
    "text": "Converting Character Variables into Factors\nThe command you want to create newdata from olddata is:\nnewdata <- olddata %>%\n    mutate(across(where(is.character), as_factor))\nFor more on factors, visit https://r4ds.had.co.nz/factors.html"
  },
  {
    "objectID": "98_gettingdataintoR.html#converting-data-frames-to-tibbles",
    "href": "98_gettingdataintoR.html#converting-data-frames-to-tibbles",
    "title": "Appendix A — Getting Data Into R",
    "section": "Converting Data Frames to Tibbles",
    "text": "Converting Data Frames to Tibbles\nUse as_tibble() or simply tibble() to assign the attributes of a tibble to a data frame. Note that read_rds and read_csv automatically create tibbles.\nFor more on tibbles, visit https://r4ds.had.co.nz/tibbles.html."
  },
  {
    "objectID": "98_gettingdataintoR.html#for-more-advice",
    "href": "98_gettingdataintoR.html#for-more-advice",
    "title": "Appendix A — Getting Data Into R",
    "section": "For more advice",
    "text": "For more advice\nConsider visiting the software tutorials page under the R and Data heading on our main web site."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Appendix B — References",
    "section": "",
    "text": "Gelman, Andrew, and Deborah Nolan. 2017. Teaching Statistics: A Bag\nof Tricks. Second Edition. Oxford, UK: Oxford University Press.\n\n\nIsmay, Chester, and Albert Y. Kim. 2022. ModernDive: Statistical\nInference via Data Science. http://moderndive.com/.\n\n\nWickham, Hadley, and Garrett Grolemund. 2022. R for Data\nScience. Second. O’Reilly. https://r4ds.hadley.nz/."
  }
]